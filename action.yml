name: 'Android Kernel Builder'
description: "Github Action to built android kernel."

branding:
  icon: 'activity'
  color: 'blue'

inputs:
# General Config
  clone-depth:
    description: 'Max-depth when cloning Sources'
    required: false
    default: '1'
  release:
    description: 'After the kernel compilation is completed, it will be automatically published to the releases page'
    required: false
    default: 'false'
  release-name:
    description: 'Custom release name of package kernel'
    required: false
    default: 'Anykernel3-Flasher'
  use-extended-rel-name:
    description: Enable extended release-name
  rel-name-kernel-version:
    description: 'Append kernel-version to release name'
    required: false
    default: 'false'
  rel-name-kernel-sha:
    description: 'Append kernel-sha to release name'
    required: false
    default: 'false'
  rel-name-ksu-version:
    description: 'Append ksu-version to release name'
    required: false
    default: 'false'
  rel-name-ksu-sha:
    description: 'Append ksu-sha to release name'
    required: false
    default: 'false'
# Build Config
  use-ccache:
    description: 'Enable CCache'
    required: false
    default: 'false'
  ccache-stats:
    description: 'Prints CCache Stats in the log.'
    required: false
    default: 'false'
  extra-cmd:
    description: 'Extra options of building kernel.'
    required: false
# Build Config - CLANG
#
# note: - aosp-clang takes precedence over other-clang-url
#       - change aosp-clang-version required by your build
  use-clang:
    description: 'Enable Clang'
    required: false
    default: 'false'
  aosp-clang:
    description: 'Use clang from aosp project.'
    required: false
    default: "false"
  aosp-clang-version:
    description: "AOSP clang tag versions."
    required: false
    default: "r383902"
  android-version:
    description: 'Android version needed when fetching aosp-clang.'
    required: false
    default: ""
  other-clang-url:
    description: "Third-party clang url"
    required: false
  other-clang-branch:
    description: "branch name if its a git repository"
    required: false
    default: main
# Build Config - GCC
# 
# note: - Some third-party clang has bundled GCC.
  use-gcc:
    description: 'Enable GCC'
  aosp-gcc:
    description: 'Use gcc from the aosp project.'
    required: false
    default: "false"
  other-gcc32-url:
    description: "third-party gcc32 url"
    required: false
    default: ""
  other-gcc32-branch:
    description: "branch name if its a git repository"
    required: false
    default: ""
  other-gcc64-url:
    description: "third-party gcc64 url"
    required: false
    default: ""
  other-gcc64-branch:
    description: "branch name if its a git repository"
    required: false
    default: ""
# Kernel Config
  defconfig:
    description: 'Configuration file for building android kernel'
    required: true
    default: defconfig
  arch:
    description: 'Target device architecture.'
    required: true
    default: arm64
  kernel-url:
    description: 'Kernel Source Url'
    required: true
  kernel-branch:
    description: 'Branch name for kernel source'
    required: false
  kernel-vendor-url:
    description: 'Kernel Vendor Source Url'
    required: false
  kernel-vendor-branch:
    description: 'Branch name for vendor kernel source'
    required: false
    default: ''
  kernel-dir:
    description: 'Custom name of the kernel directory to be genarated during build.'
    required: false
    default: kernel
  kernel-vendor-dir:
    description: 'Custom name of the vendor directory to be genarated during build.'
    required: false
    default: vendor
# Extra Patch Features
  use-patch:
    description: 'Enable Patching'
    required: false
    default: 'false'
  lxc:
    description: 'Enable lxc and docker configs for configs.'
    required: false
    default: 'false'
  lxc-patch:
    description: 'Apply lxc patch aviod not booting'
    required: false
    default: 'false'
  kvm:
    description: 'Enable KVM for configs.'
    required: false
    default: 'false'
  disable-lto:
    description: 'Disable LTO configs for configs.'
    required: false
    default: 'false'
  nethunter-patch:
    description: 'Enables Nethunter Patch'
    required: false
    default: 'false'
# Kernel SU Support & Others
#
# note: - if ksu-url is not defined script will use the original KSU repo
  use-ksu:
    description: 'KernelSU function support'
    required: false
    default: 'false'
  ksu-version:
    description: 'KernelSU default branch'
    required: false
    default: "main"
  ksu-url:
    description: 'Using third party KernelSU instead of official KernelSU'
    required: false
    default: ''
  ksu-lkm:
    description: 'Build KernelSU as a loadable kernel module'
    required: false
    default: 'false'
# Extras
  use-anykernel3:
    description: 'Package kernel use anykernel3.'
    required: false
    default: 'false'
  anykernel3-url:
    description: 'third-party anykernrl3 url path'
    required: false
  bootimg-url:
    description: 'boot.img path'
    required: false
  access-token:
    description: 'PAT with repository scope (https://github.com/settings/tokens)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: CCache Setup
      id: cache-setup
      if: inputs.use-ccache == 'true'
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ inputs.defconfig }}-0cb68f9cbcbb3de9c966cf66ed51471fbe51419e
        max-size: 4G
        verbose: 1
        create-symlink: true

    - name: Build Kernel
      id: build-kernel
      shell: bash
      run: |
        #!/bin/bash
        #
        if [[ ${GITHUB_ACTIONS} != "true" || ${OSTYPE} != "linux-gnu" || ! -f /bin/apt ]]; then
          printf "This Action Is Intended For Debian-based Runner.\n"
          exit 127
        fi

        # Setup Functions
        # sudo wrapper
        SU() {
          if [ "$(id -u)" -eq 0 ]; then
            "$@"
          else
            sudo "$@"
          fi
        }
        # download and extract files supports zip,tar,gz,xz,bz2,git
        download_and_extract() {
          local url=$1
          local output_name=$2
          local extract_dir=$3
          local branch=${4:-main}
          mkdir -p -v "$extract_dir"
          case "$url" in
            *.zip)
              aria2c -o "${output_name}.zip" "$url"
              unzip -q "${output_name}.zip" -d "$extract_dir"
              ;;
            *.tar.*|*.gz|*.xz|*.bz2)
              aria2c -o "${output_name}.${url##*.}" "$url" #${url##*.} only suitable for bash
              tar -C "$extract_dir" -xf "${output_name}.${url##*.}"
              ;;
            *)
              git clone "$url" "$extract_dir" --depth=${{ inputs.clone-depth }} -b "$branch"
              ;;
          esac
        }
        #
        function version_gt() { test "$(echo -e "$1\n$2" | sort -V | tail -n1)" == "$1"; }


        # Setup Build Dependencies
        echo "::group:: ⚙️ Setup Build Dependencies"
        "SU" apt-get update
        "SU" apt-get install --no-install-recommends -y binutils git make bc bison openssl curl zip kmod cpio flex libelf-dev libssl-dev libtfm-dev libc6-dev device-tree-compiler ca-certificates python3 xz-utils libc6-dev aria2 build-essential ccache pigz coccinelle parallel
        echo "::endgroup::"

        # Setup CLANG
        if [ ${{ inputs.use-clang }} = true ]; then
          echo "::group:: ⚙️ Setup CLANG"
          if [ ${{ inputs.aosp-clang }} = true ]; then
            echo "::notice:: Using AOSP clang"
            if [ -n "${{ inputs.android-version }}" ]; then
              export AOSP_CLANG_URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android${{ inputs.android-version }}-release/clang-${{ inputs.aosp-clang-version }}.tar.gz"
            else
              export AOSP_CLANG_URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/mirror-goog-main-llvm-toolchain-source/clang-${{ inputs.aosp-clang-version }}.tar.gz"
            fi
            download_and_extract "$AOSP_CLANG_URL" "aosp-clang" "$HOME/clang"
            # need GCC when using aosp-clang
            export NEED_GCC=1
          elif [ -n "${{ inputs.other-clang-url }}" ]; then
            echo "::notice:: Using third-party clang"
            export OTHER_CLANG_URL=${{ inputs.other-clang-url }}
            download_and_extract "$OTHER_CLANG_URL" "clang" "$HOME/clang" "${{ inputs.other-clang-branch }}"

            [ ! -d $HOME/clang/bin/ ] && mv $HOME/clang/*/* $HOME/clang/ # move all files under clang/*/* to clang

            if ! ls $HOME/clang/*-linux-* &>/dev/null; then
              echo "::notice:: Binutils not found in clang directory. Downloading AOSP GCC"
              export NEED_GCC=1
            fi
          else
            # use clang from repo
            "SU" apt install clang lld binutils-aarch64-linux-gnu binutils-arm-linux-gnuabeihf -y
          fi
          echo "::endgroup::"
        fi

        # Setup GCC
        if [ ${{ inputs.use-gcc }} = true ] || [ -n "$NEED_GCC" ]; then
          echo "::group:: ⚙️ Setup GCC"
          if [ ${{ inputs.aosp-gcc }} = true ] || [ -n "$NEED_GCC" ]; then
            echo "::notice:: Downloading AOSP GCC."
            if [ -n "${{ inputs.android-version }}" ]; then
              export AOSP_GCC64_URL="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9"
              export AOSP_GCC32_URL="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9"
              export AOSP_GCC_BRANCH="android${{ inputs.android-version }}-release"
            else
              export AOSP_GCC64_URL="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz"
              export AOSP_GCC32_URL="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz"
            fi
            download_and_extract "$AOSP_GCC64_URL" "gcc-aarch64" "$HOME/gcc-64" "$AOSP_GCC_BRANCH"
            download_and_extract "$AOSP_GCC32_URL" "gcc-arm" "$HOME/gcc-32" "$AOSP_GCC_BRANCH"
          elif [ -n "${{ inputs.other-gcc64-url }}" ] || [ -n "${{ inputs.other-gcc32-url }}" ]; then
            echo "::notice:: Downloading third-party GCC."
            export OTHER_GCC64_URL=${{ inputs.other-gcc64-url }}
            export OTHER_GCC32_URL=${{ inputs.other-gcc32-url }}
            download_and_extract "$OTHER_GCC64_URL" "gcc-aarch64" "$HOME/gcc-64" "${{ inputs.other-gcc64-branch }}"
            download_and_extract "$OTHER_GCC32_URL" "gcc-arm" "$HOME/gcc-32" "${{ inputs.other-gcc32-branch }}"
          fi

          if [ -d $HOME/gcc-64 ] || [ -d $HOME/gcc-32 ]; then
            [ ! -d $HOME/gcc-64/bin/ ] && mv $HOME/gcc-64/*/* $HOME/gcc-64/
            [ ! -d $HOME/gcc-32/bin/ ] && mv $HOME/gcc-32/*/* $HOME/gcc-32/
          fi
          echo "::endgroup::"
        fi

        # GCC post-Setup
        if [ -d $HOME/gcc-64/bin/ ] || [ -d $HOME/gcc-32/bin/ ]; then
          for GCC_DIR in "$HOME/gcc-64" "$HOME/gcc-32"; do
            find "$GCC_DIR"/*/*/bin -type d -exec sh -c 'mv "$(dirname "{}")"/* "$GCC_DIR"/' _ {} \; -quit >/dev/null 2>&1 || true
            for FILE in "$GCC_DIR/bin"/*; do
              FILE_NAME=$(basename "$FILE")
              MATCHED_DIR=""
              for FOLDER in $(find "$GCC_DIR" -mindepth 1 -maxdepth 1 -type d | sort -r); do
                FOLDER_NAME=$(basename "$FOLDER")
                [[ "$FILE_NAME" == "$FOLDER_NAME"* ]] && MATCHED_DIR="$FOLDER_NAME" && break
              done
              [ -n "$MATCHED_DIR" ] && case "$GCC_DIR" in
                "$HOME/gcc-64") GCC64="$MATCHED_DIR" ;;
                "$HOME/gcc-32") GCC32="$MATCHED_DIR" ;;
              esac
            done
          done
        fi

        # Pre-Build Setup
        echo "::group:: ⚙️ Pre-Build Setup"

        # initial command
        COMMAND="make -j$(nproc --all) ${{ inputs.defconfig }} ARCH=${{ inputs.arch }} all ${{ inputs.extra-cmd }} O=out"

        # setup makefile var
        if [ ${{ inputs.use-clang }} = true ]; then
          if [ -d "$HOME/clang/bin" ]; then
            echo "::notice::Using \$HOME/clang/bin/clang"
            # use clang
            CMD_PATH="$HOME/clang/bin"
            CMD_CC="clang"
            CMD_CLANG_TRIPLE="aarch64-linux-gnu-"
            if [ -z "$NEED_GCC" ]; then
              CMD_CROSS_COMPILE="aarch64-linux-gnu-"
              CMD_CROSS_COMPILE_ARM32="arm-linux-gnueabi-"
            else
              if [ -d "$HOME/gcc-64/bin" ] || [ -d "$HOME/gcc-32/bin" ]; then
                echo "::notice::Using \$HOME/gcc-{64/32}/bin"
                CMD_CROSS_COMPILE="$HOME/gcc-64/bin/${GCC64}-"
                CMD_CROSS_COMPILE_ARM32="$HOME/gcc-32/bin/${GCC32}-"
              else
                echo "::error::Unable to setup cross-compile bins"
              fi
            fi
          elif [ -d "/usr/bin/clang" ]; then
            echo "::notice::Using /usr/bin/clang"
            CMD_CC="/usr/bin/clang"
            CMD_CROSS_COMPILE="/usr/bin/aarch64-linux-gnu-"
            CMD_CROSS_COMPILE_ARM32="arm-linux-gnuabeihf-"
            CMD_CLANG_TRIPLE="aarch64-linux-gnu-"
          else
            echo "::error::CCLANG is explicitly required but was not found."
          fi
        elif [ ${{ inputs.use-gcc }} = true ]; then
          if [ -d "$HOME/gcc-64/bin" ] || [ -d "$HOME/gcc-32/bin" ]; then
            CMD_PATH="$HOME/gcc-64/bin:$HOME/gcc-32/bin"
            if [ -n "${GCC64}" ]; then
                CMD_CC="$HOME/gcc-64/bin/${GCC64}-gcc"
            else
                CMD_CC="$HOME/gcc-32/bin/${GCC32}-gcc"
            fi
            CMD_CROSS_COMPILE="${GCC64}-"
            CMD_CROSS_COMPILE_ARM32="${GCC32}-"
            CMD_CLANG_TRIPLE="aarch64-linux-gnu-"
          else
            echo "::error::GCC is explicitly required but was not found."
          fi
        fi

        if [ ${{ inputs.use-ccache }} = true ]; then
          echo "::notice::CCACHE is enabled!"
          export USE_CCACHE=1
          #export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          #echo "Listing CCACHE -> $(ls /usr/lib/ccache)"

          # ensure /usr/lib/ccache is first inside CMD_PATH
          CMD_PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:${CMD_PATH}"

          # verify compiler exist in /usr/lib/ccache
          if [ ${{ inputs.use-clang }} = true ] && [ -d "${HOME}/clang/bin" ]; then
            [ ! -e /usr/lib/ccache/clang ] && {
              echo "::notice:: Linking clang to ccache"
              ln -s /usr/lib/ccache/clang /usr/bin/ccache
            }
          fi
          if [ ${{ inputs.use-gcc }} = true ] || [ -n "$NEED_GCC" ]; then
            [ -n "${GCC64}" ] && \
              [ ! -e "/usr/lib/ccache/${GCC64}-gcc" ] && {  
                echo "::notice:: Linking ${GCC64} to ccache"
                ln -s "/usr/lib/ccache/${GCC64}-gcc" /usr/bin/ccache
              }
            [ -n "${GCC64}" ] && \
              [ ! -e "/usr/lib/ccache/${GCC32}-gcc" ] && {
                echo "::notice:: Linking ${GCC32} to ccache"
                ln -s "/usr/lib/ccache/${GCC32}-gcc" /usr/bin/ccache
              }
          fi
        fi

        # setup additional commands
        COMMAND+=" PATH=${CMD_PATH}:${PATH} CROSS_COMPILE=${CMD_CROSS_COMPILE} CROSS_COMPILE_ARM32=${CMD_CROSS_COMPILE_ARM32} CLANG_TRIPLE=${CMD_CLANG_TRIPLE} CC=${CMD_CC}"
        echo "Generated COMMAND -> ${COMMAND}"

        echo "::endgroup::"


        # Setup Target Kernel
        echo "::group:: ⚙️ Fetch Kernel Source"
        echo "::notice:: Downloading Kernel Source"
        git clone --recursive ${{ inputs.kernel-url }} -b "${{ inputs.kernel-branch }}" --depth=${{ inputs.clone-depth }} kernel/${{ inputs.kernel-dir }}

        if [ -n "${{ inputs.kernel-vendor-url }}" ]; then
          echo "::notice:: Downloading Kernel Vendor Source"
          if [ -n "${{ inputs.kernel-vendor-branch }}" ];then
            git clone ${{ inputs.kernel-vendor-url }} --depth=${{ inputs.clone-depth }} kernel/${{ inputs.kernel-vendor-dir }} -b ${{ inputs.kernel-vendor-branch }}
          else
            git clone ${{ inputs.kernel-vendor-url }} --depth=${{ inputs.clone-depth }} kernel/${{ inputs.kernel-vendor-dir }}
          fi
          test -d kernel/${{ inputs.kernel-vendor-dir }}/vendor && cp -rv kernel/${{ inputs.kernel-vendor-dir }}/vendor kernel
          test -d kernel/${{ inputs.kernel-vendor-dir }}/vendor && cp -rv kernel/${{ inputs.kernel-vendor-dir }}/vendor ./

        fi
        echo "::endgroup::"

        # Move to Kernel dir
        cd kernel/${{ inputs.kernel-dir }}

        # Evaluate Kernel
        VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
        KERNEL_SHA=$(git rev-parse --short HEAD)
        if [ "$VERSION" -lt 5 ]; then
          touch nongki.txt
        elif [ "$PATCHLEVEL" -lt 10 ]; then
          echo false > nongki.txt
        fi
        # Pass Kernel SHA to release
        [ ${{ inputs.release}} = true ] && {
          echo "KERNEL_SHA=$KERNEL_SHA" >> "$GITHUB_OUTPUT"
        }

        # Setup Kernel SU
        if [ ${{ inputs.use-ksu }} = true ]; then
          echo "::group:: ⚙️ Setup KernelSU"
          echo "::notice::Initializing KernelSU"
          if [ -f KernelSU/kernel/Kconfig ]; then
              echo "::notice::KernelSU has already been initialized!"
          else
            if [ -n "${{ inputs.ksu-url }}" ]; then
              curl -SsL "${{ inputs.ksu-url }}/raw/${{ inputs.ksu-version }}/kernel/setup.sh" | bash -s ${{ inputs.ksu-version }}
            else
              echo "Kernel version: $VERSION.$PATCHLEVEL.$SUBLEVEL"
              if [ -f nongki.txt ]; then
                printf "Warning: The KernelSU version you selected was detected to be ${{ inputs.ksu-version }}, but KernelSU has dropped support for the non-gki kernel since 0.9.5. \n This will force switch to v0.9.5.\n"
                export KVER=v0.9.5
              else
                export KVER=${{ inputs.ksu-version }}
              fi
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s "$KVER"
            fi
          fi
          if [ ${{ inputs.ksu-lkm }} = true ]; then
            if grep -q "CONFIG_KPROBES=y" "arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }}" ; then
              sed -i 's/CONFIG_KSU=y/CONFIG_KSU=m/g' "arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }}"
            else
              #echo "CONFIG_KSU=m" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }}
              sed -i '/config KSU/,/help/{s/default y/default m/}' drivers/kernelsu/Kconfig
            fi
          elif [ -f nongki.txt ]; then
            if grep -q "CONFIG_KPROBES=y" "arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }}" ; then
              echo "CONFIG_KPROBES is enabled, skip patch."
            else
              curl -SsL https://github.com/dabao1955/kernel_build_action/raw/main/kernelsu/apply_cocci.sh | bash
            fi
          fi
          echo "::endgroup::"
        fi

        # Use mkdtboimg Py3
        if [ -f scripts/dtc/libfdt/mkdtboimg.py ]; then
          if grep python2 scripts/Makefile.lib >/dev/null; then
            echo "::group:: ⚙️ Use mkdtboimg Python3 version instead of Python2 version"
            rm -rf -v scripts/dtc/libfdt/mkdtboimg.py && aria2c https://github.com/dabao1955/kernel_build_action/raw/main/mkdtboimg.py -o scripts/dtc/libfdt/mkdtboimg.py
          elif grep scripts/ufdt && test ! -d scripts/ufdt >/dev/null; then
            aria2c https://github.com/dabao1955/kernel_build_action/raw/main/mkdtboimg.py -o ufdt/libufdt/utils/src/mkdtboimg.py
          fi
          test -f /usr/bin/python2 || "SU" ln -s -f -v /usr/bin/python3 /usr/bin/python2
        else
          echo "::group:: ⚙️ Downloading mkdtboimg to /usr/local/bin"
          SU aria2c https://github.com/dabao1955/kernel_build_action/raw/main/mkdtboimg.py -o mkdtboimg
          SU chmod +x -v mkdtboimg
          SU mv mkdtboimg -v /usr/local/bin/mkdtboimg
        fi
        echo "::endgroup::"

        if [ ${{ inputs.use-patch }} = true ]; then
          echo "::notice:: Patching is Enabled!"
          
          # Kalihunter Injection
          if [ ${{ inputs.nethunter }} = true ]; then
            echo "::notice::Injecting Kalihunter"
            aria2c https://github.com/dabao1955/kernel_build_action/raw/main/nethunter/config.sh -o nconfig.sh &&  bash nconfig.sh arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }} -w
            if [ ${{ inputs.nethunter-patch }} = true ]; then
              aria2c https://github.com/dabao1955/kernel_build_action/raw/main/nethunter/add-wifi-injection.patch && git apply add-wifi-injection.patch
              aria2c https://github.com/dabao1955/kernel_build_action/raw/main/nethunter/fix-ath9k-naming-conflict.patch && git apply fix-ath9k-naming-conflict.patch
              if [ "$PATCHLEVEL" -lt "19" ]; then
                  aria2c https://github.com/dabao1955/kernel_build_action/raw/main/nethunter/add-wifi-injection-4.14.patch && git apply add-wifi-injection-4.14.patch
              fi
            else
              echo "::notice::Skipping NETHUNTER injection.."
            fi
          fi

          # Disable LTO in config
          if [ ${{ inputs.disable-lto }} = true ]; then
            if grep -q "LTO" "arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }}"; then
              echo "::notice::Disabling LTO"
              sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }}
              sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }}
              sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }}
              echo "CONFIG_LTO_NONE=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }} >/dev/null
            else
              echo "::notice::Skipping LTO patching.."
            fi
          fi

          # Enable KVM in config
          if [ ${{ inputs.kvm }} = true ]; then
            echo "::notice::Enabling KVM"
            echo "CONFIG_VIRTUALIZATION=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }} >/dev/null
            echo "CONFIG_KVM=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }} >/dev/null
            echo "CONFIG_KVM_MMIO=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }} >/dev/null
            echo "CONFIG_KVM_ARM_HOST=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }} >/dev/null
          fi

          # Enable LXC in config
          if [ ${{ inputs.lxc }} = true ]; then
            echo "::notice::Enabling LXC"
            aria2c https://github.com/dabao1955/kernel_build_action/raw/main/lxc/config.sh && bash config.sh arch/${{ inputs.arch }}/configs/${{ inputs.defconfig }} -w
            if [ ${{ inputs.lxc-patch }} = true ]; then
              curl -SsL https://github.com/dabao1955/kernel_build_action/raw/main/lxc/patch.sh | bash
            else
              echo "::notice::Skip LXC patching..... "
            fi
          fi
          echo "::endgroup::"
        fi

        if [ ${{ inputs.release }} = true ] && [ ${{ inputs.use-extended-rel-name }} = false ]; then
          echo "RELEASE_NAME=${{ inputs.release-name }}" >> "$GITHUB_OUTPUT"
        elif [ ${{ inputs.release }} = true ] && [ ${{ inputs.use-extended-rel-name }} = true ]; then
          echo "::group:: ⚙️ Generate Extended Release Name"
          RELEASE_NAME=${{ inputs.release-name }}
          [ ${{ inputs.rel-name-kernel-version}} = true ] && {
            RELEASE_NAME+=" $VERSION.$PATCHLEVEL.$SUBLEVEL"
            [ ${{ inputs.rel-name-kernel-sha }} = true ] && {
              RELEASE_NAME+="@${KERNEL_SHA}"
            }
          }

          [ ${{ inputs.rel-name-ksu-version }} = true ] && {
            export KCWD="$(pwd)"
            # check if KernelSU is present
            if [ -e "$KCWD/KernelSU" ]; then
              # KernelSU Version Generation
              KERNEL_KSU_GITVER=$(cd "$KCWD/KernelSU"; /usr/bin/env PATH="$PATH":/usr/bin:/usr/local/bin git rev-list --count HEAD)
              KERNEL_KSU_VER=$(expr 10000 + $KSU_GIT_VERSION + 200)
              RELEASE_NAME+=" KSUv-$KERNEL_KSU_VER"
              [ ${{ inputs.rel-name-ksu-sha }} = true ] && {
                KERNEL_KSU_SHA=$(cd "$KCWD/KernelSU"; /usr/bin/env PATH="$PATH":/usr/bin:/usr/local/bin git rev-parse --short HEAD)
                RELEASE_NAME+="@${KERNEL_SHA}"
              }
            else
              echo "::warning::Unable to apply rel-name-ksu-version due non-existent KSU directory."
            fi
          }
          # For github_output
          echo "RELEASE_NAME=$RELEASE_NAME" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"
        fi

        echo "::group:: ⚙️ Build Kernel"
        mkdir out -p -v
        # run the command
        ${COMMAND}
        unset CMD_PATH CMD_CC CMD_CLANG_TRIPLE CMD_CROSS_COMPILE CMD_CROSS_COMPILE_ARM32 USE_CCACHE CLANG_TRIPLE CROSS_COMPILE_ARM32 CROSS_COMPILE CLANG_PATH HOMES KVER COMMAND SWAP_FILE SUBLEVEL PATCHLEVEL VERSION GCC_DIR FILE FILE_NAME MATCHED_DIR FOLDER FOLDER_NAME GCC64 GCC32 NEED_GCC AOSP_CLANG_URL OTHER_CLANG_URL AOSP_GCC64_URL AOSP_GCC32_URL AOSP_GCC_BRANCH OTHER_GCC64_URL OTHER_GCC32_URL
        echo "::endgroup::"

        if [ ${{ inputs.ccache-stats }} = true ]; then
          echo "::notice:: Invoked CCACHE STATS"
          ccache --show-stats -v
        fi

        echo "::group:: ⚙️ Prepare Boot Image"
        if [ ${{ inputs.use-anykernel3 }} = true ]; then
          echo "::notice:: Packaging Kernel using Anykernel3"
          if [ -n "${{ inputs.anykernel3-url }}" ]; then
              git clone ${{ inputs.anykernel3-url }} AnyKernel3
          else
              git clone https://github.com/osm0sis/AnyKernel3
              sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
              sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
              sed -i 's/IS_SLOT_DEVICE=0;/IS_SLOT_DEVICE=auto;/g' AnyKernel3/anykernel.sh
          fi

          if [ -f out/arch/${{ inputs.arch }}/boot/Image.*-dtb ]; then
              cp out/arch/${{ inputs.arch }}/boot/Image.*-dtb AnyKernel3/ -rv
          elif [ -f out/arch/${{ inputs.arch }}/boot/Image.* ]; then
              cp out/arch/${{ inputs.arch }}/boot/Image.* AnyKernel3/ -rv
          else
              cp out/arch/${{ inputs.arch }}/boot/Image AnyKernel3/ -rv
          fi

          test -f out/arch/${{ inputs.arch }}/boot/dtbo.img && cp -v out/arch/${{ inputs.arch }}/boot/dtbo.img AnyKernel3/
          test -f out/arch/${{ inputs.arch }}/boot/dtb && cp -v out/arch/${{ inputs.arch }}/boot/dtb AnyKernel3/

          rm -rf -v AnyKernel3/.git* AnyKernel3/README.md
          mkdir -p -v ../../build
          if [ ${{ inputs.release }} = false ]; then
            cp -r -v AnyKernel3/* ../../build
          else
            if [ ${{ inputs.use-extended-rel-name }} = true ]; then
              SAFE_RELEASE_NAME="${RELEASE_NAME// /_}"
            else
              SAFE_RELEASE_NAME="${{ inputs.release-name }}"
              SAFE_RELEASE_NAME="${SAFE_RELEASE_NAME// /_}"
            fi
            cd AnyKernel3 && \
              zip -r "$SAFE_RELEASE_NAME.zip" ./* && \
              mv -v "$SAFE_RELEASE_NAME.zip" .. && \
              cd .. && \
              mv -v "$SAFE_RELEASE_NAME.zip" ../../build/
          fi
        else
          echo "::notice:: Preparing to Upload boot.img"
          mkdir split
          cd split
          export HOST_ARCH=$(dpkg --print-architecture)
          case ${HOST_ARCH} in
              armv7* | armv8l | arm64 | armhf | arm) aria2c https://github.com/Shubhamvis98/AIK/raw/4ac321dfd48e16344e6146c505708aa720ff0bb3/bin/magiskboot_arm -o magiskboot && chmod 755 magiskboot ;;
              i*86 | x86 | amd64 | x86_64) aria2c https://github.com/Shubhamvis98/AIK/raw/4ac321dfd48e16344e6146c505708aa720ff0bb3/bin/magiskboot_x86 -o magiskboot && chmod 755 magiskboot  ;;
              *) echo "Unknown cpu architecture for this device !" && exit 1 ;;
          esac
          aria2c ${{ inputs.bootimg-url }} -o boot.img
          ./magiskboot unpack boot.img > nohup.out 2>&1 # nohup is not working in github ci!
          rm -rf -v kernel
          export FMT=$(cat nohup.out | grep "KERNEL_FMT" | awk '{gsub("\\[", "", $2); gsub("\\]", "", $2); print $2}')
          if [ "$FMT" = "raw" ] ; then
              find ../out/arch/${{ inputs.arch }}/boot -name "Image" ! -name "*-*" -exec cp -v {} kernel \;
          else
              if ls dtb >/dev/null ; then
                  find ../out/arch/${{ inputs.arch }}/boot -name "Image.*-dtb" ! -name "*-*" -exec cp -v {} kernel \;
              else
                  find ../out/arch/${{ inputs.arch }}/boot -name "Image.*" ! -name "*-*" -exec cp -v {} kernel \;
              fi
          fi
          ./magiskboot repack boot.img
          rm -rf boot.img
          mkdir -p -v ../../../build
          mv *.img ../../../build/boot.img -v
          cd ..
        fi
        echo "::endgroup::"

    - id: uploada
      if: ${{ inputs.release == 'false' && inputs.use-anykernel3 == 'false' }}
      uses: actions/upload-artifact@v4
      with:
        name: kernel-built-bootimg
        path: build/*
        if-no-files-found: error
        overwrite: true

    - id: uploadb
      if: ${{ inputs.release == 'false' && inputs.use-anykernel3 == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.release-name }}
        path: build/*
        if-no-files-found: error
        overwrite: true

    - id: release
      if: inputs.release == 'true'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ inputs.access-token }}
      with:
        name: ${{ steps.build-kernel.outputs.RELEASE_NAME }}
        tag_name: ${{ inputs.release-name }}@${{ steps.build-kernel.outputs.KERNEL_SHA }}
        files: build/*
        make_latest: true
        body: |
          source: ${{ inputs.kernel-url }}
          branch: ${{ inputs.kernel-branch }}
          config: ${{ inputs.defconfig }}